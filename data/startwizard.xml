<wizard>
        <step id="start" nextstep="introduction">
            <text value="Welcome.\n\nThis start wizard will guide you through the basic setup of your %s %s.\nPress the OK button on your remote control to move to the next step." />
            <code>
self.clearSelectedKeys()
self.selectKey("OK")
            </code>
        </step>
        <step id="introduction" >
            <text value="Use the up/down keys on your remote control to select an option. After that, press OK." />
            <list>
                <listentry caption="Use the wizard to set up basic features" step="mounten" />
                <listentry caption="Exit the wizard" step="end" />
            </list>
            <code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
            </code>
        </step>
    <step id="mounten">
        <condition>
self.condition = (config.misc.firstrun.value)
        </condition>
        <text value=" Which way of mounting do you prefer?\n\n Tip: You can also use first the devicemanager\n for partitioning and formatting,\n then go back in wizzard with key EXIT/Cancel\n and then use labelmount!" />
        <list>
            <listentry caption="Devicemanager (if partitioning and formatting is needed)" step="aftermount" />
            <listentry caption="Labelmount (take sure a label is set!)" step="aftermount" />
            <listentry caption="Not yet" step="network" />
        </list>
        <code pos="after">        
from Plugins.Extensions.PowerboardCenter.PBDeviceManager import HddSetup
from Plugins.Extensions.PowerboardCenter.PBExpander import Expander
if self["list"].index == 0:
    self.session.open(HddSetup)
if self["list"].index == 1:
    self.session.open(Expander)
        </code>
    </step>

    <step id="aftermount">
        <text value="Continue" />
        <list>
            <listentry caption="Continue" step="restorequestion" />
        </list>
        <code>
self.clearSelectedKeys()
self.selectKey("OK")
        </code>
    </step>

    <step id="restorequestion">
        <condition>
from Plugins.SystemPlugins.SoftwareManager.ImageWizard import checkConfigBackup
self.backuppath = checkConfigBackup()
self.condition = (self.backuppath is not None and config.misc.firstrun.value)
        </condition>
        <text value="Do you want to restore your settings?" />
        <list>
            <listentry caption="Yes, restore the settings now" step="restore" />
            <listentry caption="No, goto next step" step="network" />
        </list>
        <code>
self.clearSelectedKeys()
self.selectKey("OK")
        </code>
    </step>

    <step id="restorequestion">
        <condition>
from Plugins.SystemPlugins.SoftwareManager.ImageWizard import checkConfigBackup
self.backuppath = checkConfigBackup()
self.condition = (self.backuppath is None and config.misc.firstrun.value)
        </condition>
        <text value="No Backup found" />
        <list>
            <listentry caption="continue" step="network" />
        </list>
        <code>
self.clearSelectedKeys()
self.selectKey("OK")
        </code>
    </step>

    <step id="restore" nextstep="backupresult">
        <text value="You have chosen to restore your settings. Enigma2 will restart after restore. Please press OK to start the restore now." />
        <config screen="RestoreScreen" module="Plugins.SystemPlugins.SoftwareManager.BackupRestore" type="ConfigList" />
    </step>
        <step id="network" >
            <text value="Please connect your receiver to the internet" />
            <list>
                <listentry caption="Check the internet connection" step="update" />
                <listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
            </list>
            <code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
            </code>
        </step>
        <step id="update">
            <text value="Checking the internet connection" />
            <config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("OK")
            </code>
        </step>
        <step id="networkfailed" >
            <condition>
self.condition = not config.misc.installwizard.ipkgloaded.value
            </condition>
            <text value="Your receiver does not have an internet connection" />
            <list>
                <listentry caption="Check the internet connection again" step="update" />
                <listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
            </list>
            <code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
            </code>
        </step>
        <step id="nima">
            <condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
            </condition>
            <text value="Please set up tuner A" />
			<displaytext value="Please set up tuner A" />
            <config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
            </code>
        </step>
        <step id="nimb">
            <condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty
            </condition>
            <text value="Please set up tuner B" />
			<displaytext value="Please set up tuner B" />
            <config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
            </code>
        </step>
        <step id="nimc">
            <condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty
            </condition>
            <text value="Please set up tuner C" />
			<displaytext value="Please set up tuner C" />
            <config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
            </code>
        </step>
        <step id="nimd">
            <condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty
            </condition>
            <text value="Please set up tuner D" />
			<displaytext value="Please set up tuner D" />
            <config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
            </code>
        </step>
<!--
        <step id="channels">
            <condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
            </condition>
            <text value="Do you want to install a channel list?" />
            <config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList" />
            <code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
            </code>
        </step>
 -->
        <step id="scanquestion">
            <text value="Do you want to do a service scan?" />
            <condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
            </condition>
            <code>
self.hideRc()
            </code>
            <list>
                <listentry caption="No" step="end" />
                <listentry caption="Yes, do an automatic scan now" step="scan" />
                <listentry caption="Yes, do a manual scan now" step="manualscan" />
            </list>
        </step>
        <step id="scan" nextstep="end">
            <condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="What do you want to scan?" />
			<displaytext value="What do you want to scan?" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
            </condition>
            <text value="What do you want to scan?" />
			<displaytext value="What do you want to scan?" />
            <config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
        </step>
        <step id="nextscan">
            <condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
            </condition>
            <text value="Do you want to do another manual service scan?" />
            <list>
                <listentry caption="No" step="end" />
                <listentry caption="Yes, do another manual scan now" step="manualscan" />
            </list>
        </step>
        <step id="end" laststep="true">
            <text value="Thank you for using the wizard. Your receiver is now ready for use.\nPress OK to start using your receiver." />
            <code>
self.clearSelectedKeys()
self.selectKey("OK")
            </code>
        </step>
</wizard>
